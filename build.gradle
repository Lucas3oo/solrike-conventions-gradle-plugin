plugins {
  id 'eclipse'
  id 'com.gradle.plugin-publish' version '0.20.0'  // plugin publication
  id 'groovy'
  id 'java-gradle-plugin'
  id 'maven-publish' // generate the publication metadata
}

repositories {
  mavenCentral()
  gradlePluginPortal()
}

dependencies {
  // versions for the plugins are controlled here
  // Alt way to ref is <plugin id>:<plugin id>.gradle.plugin:<version>.
  implementation 'com.diffplug.spotless:spotless-plugin-gradle:6.11.0'
  implementation 'com.github.spotbugs.snom:spotbugs-gradle-plugin:5.0.13'
  implementation 'org.owasp:dependency-check-gradle:7.3.0'
  implementation 'se.solrike.sonarlint:se.solrike.sonarlint.gradle.plugin:1.0.0-beta.6'
}

group = 'se.solrike.conventions'
version = '1.0.0-beta.2'
java {
  sourceCompatibility = JavaVersion.VERSION_11
  targetCompatibility = JavaVersion.VERSION_11
}
tasks.withType(GroovyCompile) {
  configure(options) {
    options.compilerArgs << '-Xlint:deprecation' << '-Xlint:unchecked'
  }
}
sourceSets {
  main {
    java {
      srcDirs = [] // don't compile Java code twice
    }
    groovy {
      srcDirs = [
        'src/main/groovy',
        'src/main/java'
      ]
    }
  }
  test {
    java {
      srcDirs = [] // don't compile Java code twice
    }
    groovy {
      srcDirs = ['src/test/groovy']
    }
  }
}
javadoc {
  enabled = false
}
groovydoc {
  enabled = false
}

eclipse {
  classpath {
    defaultOutputDir = file('bin.nosync/main')
    file {
      whenMerged {
        def src = entries.find { it.path == 'src/main/groovy' }
        if (src) src.output = 'bin.nosync/main'
        src = entries.find { it.path == 'src/main/resources' }
        if (src) src.output = 'bin.nosync/main'
        src = entries.find { it.path == 'src/test/groovy' }
        if (src) src.output = 'bin.nosync/test'
        src = entries.find { it.path == 'src/test/resources' }
        if (src) src.output = 'bin.nosync/test'
      }
    }
  }
}


// publish the plugin like: ./gradlew publishPlugins
gradlePlugin {
  plugins {
    javaConventionsPlugin {
      id = group + '.java-conventions'
      implementationClass = 'se.solrike.conventions.JavaConventionsPlugin'
    }
  }
}

pluginBundle {
  // These settings are set for the whole plugin bundle
  website = 'https://github.com/Lucas3oo/solrike-conventions-gradle-plugin'
  vcsUrl = website

  plugins {
    javaConventionsPlugin {
      description =
          'Gradle convention plugins for Java projects. ' +
          'Configures Checkstyle, Dependency check, Eclipse, Jacoco, ' +
          'Java, Sonarlint, Spotbugs, Spotless plugins. ' +
          'Defines for Checkstyle rules, ' +
          'Spotbugs exclude filter, changes the default included and excluded Sonarlint rules and ' +
          'formatting rules for Spotless. Sets the output folder in Eclipse .classpath file.'
      displayName = 'Java conventions plugin'
      tags = ['conventions', 'checkstyle', 'dependencycheck', 'jacoco', 'java', 'sonarlint',
        'spotbugs', 'spotless']
    }
  }
}

// Run ./gradlew wrapper
wrapper {
  gradleVersion = '7.5.1'
}
