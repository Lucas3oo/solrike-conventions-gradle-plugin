plugins {
  id 'eclipse'

  // https://plugins.gradle.org/docs/publish-plugin
  id 'com.gradle.plugin-publish' version '1.0.0' // plugin publication, and java-gradle-plugin and maven-punlish plugins
  id 'groovy-gradle-plugin'
}

repositories {
  mavenCentral()
  gradlePluginPortal()
}

dependencies {
  // versions for the plugins are controlled here
  // Alt way to ref is <plugin id>:<plugin id>.gradle.plugin:<version>.
  implementation 'com.diffplug.spotless:spotless-plugin-gradle:6.11.0'
  implementation 'com.github.spotbugs.snom:spotbugs-gradle-plugin:5.0.13'
  implementation 'org.owasp:dependency-check-gradle:7.3.0'
  implementation 'se.solrike.sonarlint:se.solrike.sonarlint.gradle.plugin:1.0.0-beta.6'

  testImplementation('org.assertj:assertj-core:3.22.0')
  testImplementation('org.junit.jupiter:junit-jupiter')
  testImplementation(platform('org.junit:junit-bom:5.8.2'))

}

group = 'se.solrike.conventions'
version = '1.0.0-beta.2'
java {
  sourceCompatibility = JavaVersion.VERSION_11
  targetCompatibility = JavaVersion.VERSION_11
}
javadoc {
  enabled = false
}

tasks.withType(GroovyCompile) {
  configure(options) {
      options.compilerArgs << '-Xlint:deprecation' << '-Xlint:unchecked'
  }
}



eclipse {
  classpath {
    defaultOutputDir = file('bin.nosync/main')
    file {
      whenMerged {
        def src = entries.find { it.path == 'src/main/groovy' }
        if (src) src.output = 'bin.nosync/main'
        src = entries.find { it.path == 'src/main/resources' }
        if (src) src.output = 'bin.nosync/main'
        src = entries.find { it.path == 'src/test/groovy' }
        if (src) src.output = 'bin.nosync/test'
        src = entries.find { it.path == 'src/test/resources' }
        if (src) src.output = 'bin.nosync/test'
        src = entries.find { it.path == 'adapter-src' }
        if (src) src.output = 'bin.nosync/main'
      }
    }
  }
}

// publish the plugin like: ./gradlew publishPlugins
gradlePlugin {
  plugins {
    javaConventionsPlugin {
      id = group + '.java-conventions'
      // the class is a generated adapter class when using the groovy-gradle-plugin plugin
      implementationClass = 'SeSolrikeConventionsJavaConventionsPlugin'
      description =
          'Gradle convention plugins for Java projects. ' +
          'Configures Checkstyle, Dependency check, Eclipse, Jacoco, ' +
          'Java, Sonarlint, Spotbugs, Spotless plugins. ' +
          'Defines for Checkstyle rules, ' +
          'Spotbugs exclude filter, changes the default included and excluded Sonarlint rules and ' +
          'formatting rules for Spotless. Sets the output folder in Eclipse .classpath file.'
      displayName = 'Java conventions plugin for solrike.se'
    }
  }
}

pluginBundle {
  // These settings are set for the whole plugin bundle
  website = 'https://github.com/Lucas3oo/solrike-conventions-gradle-plugin'
  vcsUrl = website

  pluginTags = [
    javaConventionsPlugin: ['conventions', 'checkstyle', 'dependencycheck', 'eclipse', 'jacoco', 'java', 'sonarlint',
        'spotbugs', 'spotless']
  ]
}

class Name implements Named {
  String name
  Name(String name) {
    this.name = name
  }
}

task configureGradlePluginDev {
  // remove the extra plugin description that gets generated I think due to both groovy-gradle-plugin
  // and java-gradle-plugin are used
  doLast {
    def ex = getProject().getExtensions().getByType(GradlePluginDevelopmentExtension.class)
    ex.getPlugins().remove(new Name('se.solrike.conventions.java-conventions'))
  }
}
tasks.publishPlugins.dependsOn(configureGradlePluginDev)

// Run ./gradlew wrapper
wrapper {
  gradleVersion = '7.5.1'
}
